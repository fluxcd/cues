// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go k8s.io/api/networking/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/api/core/v1"
)

// ClusterCIDR represents a single configuration for per-Node Pod CIDR
// allocations when the MultiCIDRRangeAllocator is enabled (see the config for
// kube-controller-manager).  A cluster may have any number of ClusterCIDR
// resources, all of which will be considered when allocating a CIDR for a
// Node.  A ClusterCIDR is eligible to be used for a given Node when the node
// selector matches the node in question and has free CIDRs to allocate.  In
// case of multiple matching ClusterCIDR resources, the allocator will attempt
// to break ties using internal heuristics, but any ClusterCIDR whose node
// selector matches the Node may be used.
#ClusterCIDR: {
	metav1.#TypeMeta

	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	metadata?: metav1.#ObjectMeta @go(ObjectMeta) @protobuf(1,bytes,opt)

	// Spec is the desired state of the ClusterCIDR.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	spec?: #ClusterCIDRSpec @go(Spec) @protobuf(2,bytes,opt)
}

// ClusterCIDRSpec defines the desired state of ClusterCIDR.
#ClusterCIDRSpec: {
	// NodeSelector defines which nodes the config is applicable to.
	// An empty or nil NodeSelector selects all nodes.
	// This field is immutable.
	// +optional
	nodeSelector?: null | v1.#NodeSelector @go(NodeSelector,*v1.NodeSelector) @protobuf(1,bytes,opt)

	// PerNodeHostBits defines the number of host bits to be configured per node.
	// A subnet mask determines how much of the address is used for network bits
	// and host bits. For example an IPv4 address of 192.168.0.0/24, splits the
	// address into 24 bits for the network portion and 8 bits for the host portion.
	// To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6).
	// Minimum value is 4 (16 IPs).
	// This field is immutable.
	// +required
	perNodeHostBits: int32 @go(PerNodeHostBits) @protobuf(2,varint,opt)

	// IPv4 defines an IPv4 IP block in CIDR notation(e.g. "10.0.0.0/8").
	// At least one of IPv4 and IPv6 must be specified.
	// This field is immutable.
	// +optional
	ipv4: string @go(IPv4) @protobuf(3,bytes,opt)

	// IPv6 defines an IPv6 IP block in CIDR notation(e.g. "fd12:3456:789a:1::/64").
	// At least one of IPv4 and IPv6 must be specified.
	// This field is immutable.
	// +optional
	ipv6: string @go(IPv6) @protobuf(4,bytes,opt)
}

// ClusterCIDRList contains a list of ClusterCIDR.
#ClusterCIDRList: {
	metav1.#TypeMeta

	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	metadata?: metav1.#ListMeta @go(ListMeta) @protobuf(1,bytes,opt)

	// Items is the list of ClusterCIDRs.
	items: [...#ClusterCIDR] @go(Items,[]ClusterCIDR) @protobuf(2,bytes,rep)
}
