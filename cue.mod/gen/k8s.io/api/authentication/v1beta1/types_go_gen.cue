// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go k8s.io/api/authentication/v1beta1

package v1beta1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// TokenReview attempts to authenticate a token to a known user.
// Note: TokenReview requests may be cached by the webhook token authenticator
// plugin in the kube-apiserver.
#TokenReview: {
	metav1.#TypeMeta

	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	metadata?: metav1.#ObjectMeta @go(ObjectMeta) @protobuf(1,bytes,opt)

	// Spec holds information about the request being evaluated
	spec: #TokenReviewSpec @go(Spec) @protobuf(2,bytes,opt)

	// Status is filled in by the server and indicates whether the token can be authenticated.
	// +optional
	status?: #TokenReviewStatus @go(Status) @protobuf(3,bytes,opt)
}

// TokenReviewSpec is a description of the token authentication request.
#TokenReviewSpec: {
	// Token is the opaque bearer token.
	// +optional
	token?: string @go(Token) @protobuf(1,bytes,opt)

	// Audiences is a list of the identifiers that the resource server presented
	// with the token identifies as. Audience-aware token authenticators will
	// verify that the token was intended for at least one of the audiences in
	// this list. If no audiences are provided, the audience will default to the
	// audience of the Kubernetes apiserver.
	// +optional
	audiences?: [...string] @go(Audiences,[]string) @protobuf(2,bytes,rep)
}

// TokenReviewStatus is the result of the token authentication request.
#TokenReviewStatus: {
	// Authenticated indicates that the token was associated with a known user.
	// +optional
	authenticated?: bool @go(Authenticated) @protobuf(1,varint,opt)

	// User is the UserInfo associated with the provided token.
	// +optional
	user?: #UserInfo @go(User) @protobuf(2,bytes,opt)

	// Audiences are audience identifiers chosen by the authenticator that are
	// compatible with both the TokenReview and token. An identifier is any
	// identifier in the intersection of the TokenReviewSpec audiences and the
	// token's audiences. A client of the TokenReview API that sets the
	// spec.audiences field should validate that a compatible audience identifier
	// is returned in the status.audiences field to ensure that the TokenReview
	// server is audience aware. If a TokenReview returns an empty
	// status.audience field where status.authenticated is "true", the token is
	// valid against the audience of the Kubernetes API server.
	// +optional
	audiences?: [...string] @go(Audiences,[]string) @protobuf(4,bytes,rep)

	// Error indicates that the token couldn't be checked
	// +optional
	error?: string @go(Error) @protobuf(3,bytes,opt)
}

// UserInfo holds the information about the user needed to implement the
// user.Info interface.
#UserInfo: {
	// The name that uniquely identifies this user among all active users.
	// +optional
	username?: string @go(Username) @protobuf(1,bytes,opt)

	// A unique value that identifies this user across time. If this user is
	// deleted and another user by the same name is added, they will have
	// different UIDs.
	// +optional
	uid?: string @go(UID) @protobuf(2,bytes,opt)

	// The names of groups this user is a part of.
	// +optional
	groups?: [...string] @go(Groups,[]string) @protobuf(3,bytes,rep)

	// Any additional information provided by the authenticator.
	// +optional
	extra?: {[string]: #ExtraValue} @go(Extra,map[string]ExtraValue) @protobuf(4,bytes,rep)
}

// ExtraValue masks the value so protobuf can generate
// +protobuf.nullable=true
// +protobuf.options.(gogoproto.goproto_stringer)=false
#ExtraValue: [...string]
