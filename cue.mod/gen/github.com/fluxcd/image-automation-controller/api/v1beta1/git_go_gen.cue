// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/fluxcd/image-automation-controller/api/v1beta1

package v1beta1

import (
	sourcev1 "github.com/fluxcd/source-controller/api/v1beta2"
	"github.com/fluxcd/pkg/apis/meta"
)

#GitSpec: {
	// Checkout gives the parameters for cloning the git repository,
	// ready to make changes. If not present, the `spec.ref` field from the
	// referenced `GitRepository` or its default will be used.
	// +optional
	checkout?: null | #GitCheckoutSpec @go(Checkout,*GitCheckoutSpec)

	// Commit specifies how to commit to the git repository.
	// +required
	commit: #CommitSpec @go(Commit)

	// Push specifies how and where to push commits made by the
	// automation. If missing, commits are pushed (back) to
	// `.spec.checkout.branch` or its default.
	// +optional
	push?: null | #PushSpec @go(Push,*PushSpec)
}

#GitCheckoutSpec: {
	// Reference gives a branch, tag or commit to clone from the Git
	// repository.
	// +required
	ref: sourcev1.#GitRepositoryRef @go(Reference)
}

// CommitSpec specifies how to commit changes to the git repository
#CommitSpec: {
	// Author gives the email and optionally the name to use as the
	// author of commits.
	// +required
	author: #CommitUser @go(Author)

	// SigningKey provides the option to sign commits with a GPG key
	// +optional
	signingKey?: null | #SigningKey @go(SigningKey,*SigningKey)

	// MessageTemplate provides a template for the commit message,
	// into which will be interpolated the details of the change made.
	// +optional
	messageTemplate?: string @go(MessageTemplate)
}

#CommitUser: {
	// Name gives the name to provide when making a commit.
	// +optional
	name?: string @go(Name)

	// Email gives the email to provide when making a commit.
	// +required
	email: string @go(Email)
}

// SigningKey references a Kubernetes secret that contains a GPG keypair
#SigningKey: {
	// SecretRef holds the name to a secret that contains a 'git.asc' key
	// corresponding to the ASCII Armored file containing the GPG signing
	// keypair as the value. It must be in the same namespace as the
	// ImageUpdateAutomation.
	// +required
	secretRef?: meta.#LocalObjectReference @go(SecretRef)
}

// PushSpec specifies how and where to push commits.
#PushSpec: {
	// Branch specifies that commits should be pushed to the branch
	// named. The branch is created using `.spec.checkout.branch` as the
	// starting point, if it doesn't already exist.
	// +required
	branch: string @go(Branch)
}
