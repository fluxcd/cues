// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/fluxcd/source-controller/api/v1beta2

package v1beta2

import (
	"github.com/fluxcd/pkg/apis/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// OCIRepositoryKind is the string representation of a OCIRepository.
#OCIRepositoryKind: "OCIRepository"

// OCIRepositoryPrefix is the prefix used for OCIRepository URLs.
#OCIRepositoryPrefix: "oci://"

// GenericOCIProvider provides support for authentication using static credentials
// for any OCI compatible API such as Docker Registry, GitHub Container Registry,
// Docker Hub, Quay, etc.
#GenericOCIProvider: "generic"

// AmazonOCIProvider provides support for OCI authentication using AWS IRSA.
#AmazonOCIProvider: "aws"

// GoogleOCIProvider provides support for OCI authentication using GCP workload identity.
#GoogleOCIProvider: "gcp"

// AzureOCIProvider provides support for OCI authentication using a Azure Service Principal,
// Managed Identity or Shared Key.
#AzureOCIProvider: "azure"

// OCIRepositorySpec defines the desired state of OCIRepository
#OCIRepositorySpec: {
	// URL is a reference to an OCI artifact repository hosted
	// on a remote container registry.
	// +kubebuilder:validation:Pattern="^oci://.*$"
	// +required
	url: string @go(URL)

	// The OCI reference to pull and monitor for changes,
	// defaults to the latest tag.
	// +optional
	ref?: null | #OCIRepositoryRef @go(Reference,*OCIRepositoryRef)

	// LayerSelector specifies which layer should be extracted from the OCI artifact.
	// When not specified, the first layer found in the artifact is selected.
	// +optional
	layerSelector?: null | #OCILayerSelector @go(LayerSelector,*OCILayerSelector)

	// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
	// When not specified, defaults to 'generic'.
	// +kubebuilder:validation:Enum=generic;aws;azure;gcp
	// +kubebuilder:default:=generic
	// +optional
	provider?: string @go(Provider)

	// SecretRef contains the secret name containing the registry login
	// credentials to resolve image metadata.
	// The secret must be of type kubernetes.io/dockerconfigjson.
	// +optional
	secretRef?: null | meta.#LocalObjectReference @go(SecretRef,*meta.LocalObjectReference)

	// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
	// the image pull if the service account has attached pull secrets. For more information:
	// https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
	// +optional
	serviceAccountName?: string @go(ServiceAccountName)

	// CertSecretRef can be given the name of a secret containing
	// either or both of
	//
	//  - a PEM-encoded client certificate (`certFile`) and private
	//  key (`keyFile`);
	//  - a PEM-encoded CA certificate (`caFile`)
	//
	//  and whichever are supplied, will be used for connecting to the
	//  registry. The client cert and key are useful if you are
	//  authenticating with a certificate; the CA cert is useful if
	//  you are using a self-signed server certificate.
	// +optional
	certSecretRef?: null | meta.#LocalObjectReference @go(CertSecretRef,*meta.LocalObjectReference)

	// The interval at which to check for image updates.
	// +required
	interval: metav1.#Duration @go(Interval)

	// The timeout for remote OCI Repository operations like pulling, defaults to 60s.
	// +kubebuilder:default="60s"
	// +optional
	timeout?: null | metav1.#Duration @go(Timeout,*metav1.Duration)

	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	// +optional
	ignore?: null | string @go(Ignore,*string)

	// This flag tells the controller to suspend the reconciliation of this source.
	// +optional
	suspend?: bool @go(Suspend)
}

// OCIRepositoryRef defines the image reference for the OCIRepository's URL
#OCIRepositoryRef: {
	// Digest is the image digest to pull, takes precedence over SemVer.
	// The value should be in the format 'sha256:<HASH>'.
	// +optional
	digest?: string @go(Digest)

	// SemVer is the range of tags to pull selecting the latest within
	// the range, takes precedence over Tag.
	// +optional
	semver?: string @go(SemVer)

	// Tag is the image tag to pull, defaults to latest.
	// +optional
	tag?: string @go(Tag)
}

// OCILayerSelector specifies which layer should be extracted from an OCI Artifact
#OCILayerSelector: {
	// MediaType specifies the OCI media type of the layer
	// which should be extracted from the OCI Artifact. The
	// first layer matching this type is selected.
	// +optional
	mediaType?: string @go(MediaType)
}

// OCIRepositoryVerification verifies the authenticity of an OCI Artifact
#OCIRepositoryVerification: {
	// Provider specifies the technology used to sign the OCI Artifact.
	// +kubebuilder:validation:Enum=cosign
	provider: string @go(Provider)

	// SecretRef specifies the Kubernetes Secret containing the
	// trusted public keys.
	secretRef: meta.#LocalObjectReference @go(SecretRef)
}

// OCIRepositoryStatus defines the observed state of OCIRepository
#OCIRepositoryStatus: {
	// ObservedGeneration is the last observed generation.
	// +optional
	observedGeneration?: int64 @go(ObservedGeneration)

	// Conditions holds the conditions for the OCIRepository.
	// +optional
	conditions?: [...metav1.#Condition] @go(Conditions,[]metav1.Condition)

	// URL is the download link for the artifact output of the last OCI Repository sync.
	// +optional
	url?: string @go(URL)

	// Artifact represents the output of the last successful OCI Repository sync.
	// +optional
	artifact?: null | #Artifact @go(Artifact,*Artifact)

	meta.#ReconcileRequestStatus
}

// OCIPullFailedReason signals that a pull operation failed.
#OCIPullFailedReason: "OCIArtifactPullFailed"

// OCILayerOperationFailedReason signals that an OCI layer operation failed.
#OCILayerOperationFailedReason: "OCIArtifactLayerOperationFailed"

// OCIRepository is the Schema for the ocirepositories API
#OCIRepository: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #OCIRepositorySpec @go(Spec)

	// +kubebuilder:default={"observedGeneration":-1}
	status?: #OCIRepositoryStatus @go(Status)
}

// OCIRepositoryList contains a list of OCIRepository
// +kubebuilder:object:root=true
#OCIRepositoryList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#OCIRepository] @go(Items,[]OCIRepository)
}
